#!/usr/bin/python
"""
Takes a list of preflop hand/value pairs
and creates a 13x13 matrix of the values
"""

from __future__ import print_function

import argparse as ap
import re
import sys

import holdem


def is_number(s):
    try:
        float(s)  # for int, long and float
    except ValueError:
        try:
            complex(s)  # for complex
        except ValueError:
            return False

    return True


def normalize(values, norm):
    for k in values:
        values[k] /= norm


def preflopNormalize(values):
    maxval = 0
    for k in values:
        tval = values[k]
        if len(k) == 2:
            tval *= 2
        elif k[-1] == 's':
            tval *= 3
        if tval > maxval:
            maxval = tval
    for k in values:
        tval = maxval
        if len(k) == 2:
            tval /= 2
        elif k[-1] == 's':
            tval /= 3
        values[k] /= tval


def constructMatrix(handvals, threshold):
    lines = []
    line = ''

    for i in range(0, 169):
        if i % 13 == 0:
            lines.append(line)
            line = ''

        h = holdem.pfIndexToPocket[i]
        if h in handvals:
            v = handvals[h]
        else:
            v = 0.0
        if v < threshold:
            line += '%6s  ' % '-'
        else:
            line += '%6.3f  ' % v
        if i % 13 == 4:
            line += '|'

    lines.append(line)

    header = '  '
    for rank in holdem.tranks:
        header += '%8s' % holdem.tranks[rank]
        if holdem.tranks[rank] == 'T':
            header += ' '
    print(header)

    tpos = header.find('T')
    border = '-' * (tpos + 3) + '+' + '-' * (len(lines[1]) - 2 - tpos)
    print(border)

    for i, l in enumerate(lines[1:]):
        print(holdem.tranks[i], ' ', l)
        if holdem.tranks[i] == 'T':
            print(border)

    print('')
    line = ''
    for i in range(0, 169):
        h = holdem.pfIndexToPocket[i]
        if handvals[h] > threshold:
            line += '%s=%.4f,' % (h, handvals[h])
            #print(handvals[h])
    print(line)


def readHandData(data, handcol, valuecol, norm):
    """Very tolerant hand/value parsing method."""
    # list of allowable chars in the hand.  Hands can either be
    # specified by numbers or preflop hand type.  All other characters
    # are stripped out of the hand token, not the 10 at the end
    hchars = 'AKQJT98765432so10'
    handvals = {}
    tokmap = {}
    doHand = False
    for line in data:
        if ',' in line:
            toks = line.split(',')
        else:
            toks = line.split()
        hand = ''.join(filter(lambda x: x in hchars, toks[handcol]))
        if not hand:
            continue
        if not hand.isdigit():
            doHand = True
        val = float(re.sub('[,]', '', toks[valuecol]))
        tokmap[hand] = val
    for k in tokmap:
        hand = k
        if not doHand:
            hand = holdem.pfIndexToPocket[int(k)]
        handvals[hand] = tokmap[k]
    if norm == 'pf':
        preflopNormalize(handvals)
    elif norm == 'data':
        normalize(handvals, max(handvals.values()))
    elif is_number(norm):
        normalize(handvals, float(norm))
    return handvals


def main(argv=None):
    parser = ap.ArgumentParser(
        description=__doc__,
        add_help=False,  # We need to hijack '-h' for 'hand-column'.
        epilog='The columns need to be space separated.',
        formatter_class=ap.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        '-?', '--help', action='help', help='show this help message and exit')
    parser.add_argument(
        '-h',
        '--hand-column',
        type=int,
        metavar='N',
        default=0,
        help='column number to find hand')
    parser.add_argument('-v', '--value-column', type=int, metavar='N',
                        default=1, help='column number to find value')
    parser.add_argument('-n', '--normalize', type=str,
                        choices=['pf', 'data', 'none'],
                        default='none', help='normalize flag')
    parser.add_argument('-f', '--file', type=str, metavar='path',
                        help='file to find data, default=stdin')
    parser.add_argument('-t', '--threshold', type=float, default=0.001)

    args = parser.parse_args(argv)

    # process arugments
    handcol = args.hand_column
    valcol = args.value_column
    norm = args.normalize
    dataFile = sys.stdin if not args.file else open(args.file)
    threshold = args.threshold

    handvals = readHandData(dataFile, handcol, valcol, norm)
    constructMatrix(handvals, threshold)
    if norm != 'none':
        print('(%s normalized)' % norm)


#
# launch main
#
if __name__ == '__main__':
    sys.exit(main())
